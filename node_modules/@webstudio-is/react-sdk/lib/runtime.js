// src/context.tsx
import { createContext, useContext, useMemo } from "react";
import { createJsonStringifyProxy, isPlainObject } from "@webstudio-is/sdk";
var ReactSdkContext = createContext({
  assetBaseUrl: "/",
  imageBaseUrl: "/",
  imageLoader: ({ src }) => src,
  resources: {}
});
var useResource = (name) => {
  const { resources } = useContext(ReactSdkContext);
  const resource = resources[name];
  const resourceMemozied = useMemo(
    () => isPlainObject(resource) ? createJsonStringifyProxy(resource) : resource,
    [resource]
  );
  return resourceMemozied;
};

// src/hook.ts
var getClosestInstance = (instancePath, currentInstance, closestComponent) => {
  let matched = false;
  for (const instance of instancePath) {
    if (currentInstance === instance) {
      matched = true;
    }
    if (matched && instance.component === closestComponent) {
      return instance;
    }
  }
};
var getInstanceSelectorById = (instanceSelector, instanceId) => {
  const index = instanceSelector.findIndex(
    (selector) => selector === instanceId
  );
  if (index === -1) {
    return [];
  }
  return instanceSelector.slice(index);
};

// src/variable-state.tsx
import { createJsonStringifyProxy as createJsonStringifyProxy2, isPlainObject as isPlainObject2 } from "@webstudio-is/sdk";
import { useState, useMemo as useMemo2 } from "react";
var useVariableState = (initialState) => {
  const [state, setState] = useState(initialState);
  const value = useMemo2(
    () => isPlainObject2(state) ? createJsonStringifyProxy2(state) : state,
    [state]
  );
  return [value, setState];
};

// src/runtime.ts
var getIndexWithinAncestorFromComponentProps = (props) => {
  return props["data-ws-index"];
};
export {
  ReactSdkContext,
  getClosestInstance,
  getIndexWithinAncestorFromComponentProps,
  getInstanceSelectorById,
  useResource,
  useVariableState
};
